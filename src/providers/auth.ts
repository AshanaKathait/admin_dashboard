import { AuthProvider} from "@refinedev/core";

import { API_URL, dataProvider } from "./data";

export const authCredentials = {
    email: "michael.scott@dundermifflin.com",
    password: "demodemo",
};

export const authProvider: AuthProvider = {
    login: async ({email}) =>{
        try{
            const {data} = await dataProvider.custom({
                url: API_URL,
                method: "post",
                headers: {},
                meta: {
                    variables: {email},
                    rawQuery:`
                      mutation Login($email: String!){
                      login(loginInput: { email: $email}){
                      accessToken
                      }
                    }
                    `,
                },
            });

            //save the access token in local storage
            localStorage.setItem("access_token", data.login.accessToken);

            return{
                success: true,
                redirectTo: "/",
            };

        } catch (e) {
            const error = e as Error;

            return {
                success: false,
                error: {
                    message: "message" in error ? error.message : "Login failed",
                    name: "name" in error ? error.name: "Invalid email or password",
                },
            };
        }

    },

    //Simply remove the access token from the local storage for th logout
    logout: async () =>{
        localStorage.removeItem("access_token");

        return{
            success: true,
            redirectTo: "/login",
        };
    },

    onError: async (error) => {
        // a check to see if the error is an authentication error
        // if so, set logout to true
        if(error.statusCode == "UNAUTHENTICATED"){
            return {
                logout: true,
                ...error,
            };
        }

        return {error};
    },

    check: async () =>{
        try{
            //get the identity ofthe user
            //this is to know if the user is authenticated or not
            await dataProvider.custom({
                url: API_URL,
                method:"post",
                headers: {},
                meta: {
                    rawQuery: `
                    query Me {
                    me{
                    name
                    }
                  }
                    `,
                },
            });
            //if the user is authenticated , then redirect it to the home page
            return {
                authenticated: true,
                redirectTo: "/",
            };
        } catch(error) {
            //for any other error, redirect to login page
            return {
                authenticated: false,
                redirectTo: "/login",
            };
        }
    },

    getIdentity: async() => {
        const accessToken = localStorage.getItem("access_token");
        try{
            //call the GraphQL API to get the user information
            //we' re using me because graphQL API does'nt have a type for the me quey yet
            // we'll add some queries and mutations later and change this to user which will be generated by codegen

            const { data } = await dataProvider.custom<{me: any }>({
                url: API_URL,
                method: "post",
                headers: accessToken
                ?{
                    //send the acccessToken in authorization header
                    Authorization: `Bearer ${accessToken}`,
                }
                : {},
            meta:{
                //get the user info such as name, emal etc
                rawQuery: `
                query Me {
                me{
                id
                name
                email
                phone
                jobTitle
                timezone
                avatarUrl
               }
             }
            `,
            },
            });

            return data.me;
        } catch (error) {
            return undefined;
        }
    },
}